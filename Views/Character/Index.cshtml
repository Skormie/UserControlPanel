@using PagedList.Mvc;
@model PagedList.IPagedList<UserControlPanel.Models.Character>

@{
    ViewBag.Title = "Index";
}
    <link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm("Index", "Character", FormMethod.Get))
{
<p>
    Filter Name/Class: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
    <input type="submit" name="Filter" value="Filter" />
</p>
}
<table class="table table-bordered">
    <tr>
        <th>
            @Html.DisplayName("Login ID")
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Name)*@
            @Html.ActionLink("Name", "Index", new { sortOrder = "Name", currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Level)*@
            @Html.ActionLink("Level", "Index", new { sortOrder = "Level", currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Class)*@
            @Html.ActionLink("Class", "Index", new { sortOrder = "Class", currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.DisplayName("Experience")
        </th>
        <th>
            @Html.DisplayName("Next")
        </th>
        <th>
            @Html.DisplayName("CharacterCreationDate")
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            <div class="text-info">
                <i class="fas fa-khanda"></i> @Html.DisplayFor(modelItem => item.LoginID)
            </div>
        </td>
        <td>
            <div class="text-success">
                @Html.DisplayFor(modelItem => item.Name)
            </div>
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Level)
        </td>
        <td>
            @switch (item.Class)
            {
                case UserControlPanel.Models.Job.SWORDMAN:
                    <i class="fab fa-galactic-senate"></i>
                    break;
                case UserControlPanel.Models.Job.WIZARD:
                    <i class="fab fa-phoenix-squadron"></i>
                    break;
                case UserControlPanel.Models.Job.SAGE:
                    <i class="fas fa-journal-whills"></i>
                    break;
                case UserControlPanel.Models.Job.PROFFESSOR:
                    <i class="fas fa-book-dead"></i>
                    break;
                case UserControlPanel.Models.Job.SNIPER:
                    <i class="fas fa-location-arrow"></i>
                    break;
                case UserControlPanel.Models.Job.CHAMPION:
                    <i class="fas fa-gopuram"></i>
                    break;
                case UserControlPanel.Models.Job.THEIF:
                    <i class="fas fa-eye"></i>
                    break;
                case UserControlPanel.Models.Job.ASSASSIN:
                    <i class="far fa-eye"></i>
                    break;
                case UserControlPanel.Models.Job.PALADIN:
                    <i class="fas fa-chess-rook"></i>
                    break;
                case UserControlPanel.Models.Job.ACOLYTE:
                    <i class="fas fa-book-medical"></i>
                    break;
                case UserControlPanel.Models.Job.PREIST:
                    <i class="fas fa-quran"></i>
                    break;
                case UserControlPanel.Models.Job.MONK:
                    <i class="fas fa-torah"></i>
                    break;
                default:
                    break;
            }
            @Html.DisplayFor(modelItem => item.Class)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Experience)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Next)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CharacterCreationDate)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </td>
    </tr>
}

</table>
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
@Html.PagedListPager(Model, page => Url.Action("Index", new { page}))